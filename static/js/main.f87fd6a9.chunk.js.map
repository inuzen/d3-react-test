{"version":3,"sources":["context/global/globalContext.js","context/global/globalReducer.js","context/global/GlobalState.js","components/GraphFiled.js","components/graph-controls/DataItem.js","components/graph-controls/GraphControls.js","App.js","index.js"],"names":["globalContext","createContext","state","action","type","data","payload","filter","item","id","GlobalState","props","useReducer","globalReducer","dispatch","Provider","value","getDataFromStorage","JSON","parse","addDataPoint","deleteDataPoint","children","GraphField","useContext","GlobalContext","svgRef","useRef","contRef","dimensions","ref","useState","setDimensions","useEffect","target","current","resObs","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObs","svg","select","xScale","scaleTime","domain","min","d","Date","timeStamp","max","range","width","yScale","scaleLinear","dataPoint","height","myLine","line","x","y","selectAll","join","attr","text","buildChart","localStorage","setItem","stringify","className","leadingZero","num","slice","DataItem","date","dateObj","time","getHours","getMinutes","getSeconds","map","getMilliseconds","onClick","e","preventDefault","GraphControlsForm","initData","getItem","numRef","addDP","curValue","isNaN","length","Number","onKeyDown","keyCode","placeholder","key","App","expandedRight","setExpandedRight","expandedLeft","setExpandedLeft","leftPanelRef","rightPanelRef","style","getAttribute","classList","toggle","name","GraphControls","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f87fd6a9.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst globalContext = createContext();\r\n\r\nexport default globalContext;\r\n","export default (state, action) =>{\r\n  switch(action.type){\r\n    case 'GET_DATA':\r\n    return {\r\n      ...state,\r\n      data: action.payload\r\n    }\r\n    case 'ADD_ITEM':\r\n    return {\r\n      ...state,\r\n      data: [...state.data, action.payload],\r\n    }\r\n    case 'DELETE_ITEM':\r\n    return {\r\n      ...state,\r\n      data: state.data.filter(item=> item.id !== action.payload),\r\n    }\r\n    default:\r\n    return state;\r\n\r\n  }\r\n}\r\n","import React, {useReducer} from 'react';\r\nimport GlobalContext from './globalContext';\r\nimport globalReducer from './globalReducer';\r\n\r\n\r\nconst GlobalState = (props) => {\r\n  const initialState = {data: []};\r\n\r\n  const [state, dispatch] = useReducer(globalReducer, initialState);\r\n\r\n  //ACTIONS:\r\n  //get datapoints from local storage if present\r\n  const getDataFromStorage = (data) =>{\r\n    //data = whole data array\r\n  dispatch({type: \"GET_DATA\", payload: JSON.parse(data)});\r\n  }\r\n\r\n  //add new dataPoint\r\n  const addDataPoint = (item) => {\r\n    //item = {id, dataPoint, timeStamp}\r\n    dispatch({type: 'ADD_ITEM', payload: item});\r\n  }\r\n\r\n  //delete dataPoint\r\n  const deleteDataPoint = (id) => {\r\n    dispatch({type: 'DELETE_ITEM', payload: id});\r\n  }\r\n\r\n\r\n  return (<GlobalContext.Provider value={{\r\n    data: state.data,\r\n    getDataFromStorage, addDataPoint, deleteDataPoint\r\n  }}>\r\n    {props.children}\r\n  </GlobalContext.Provider>)\r\n}\r\n\r\nexport default GlobalState;\r\n","import React, {useRef, useEffect, useContext, useState} from 'react';\r\nimport GlobalContext from '../context/global/globalContext';\r\nimport {\r\n  select,\r\n  line,\r\n  scaleTime,\r\n  scaleLinear,\r\n  max,\r\n  min\r\n} from 'd3';\r\n\r\n//custom hook for resizing the svg. For some reason Observer doesnt work\r\n//with svg elements correctly so we have to use it on wrapper div\r\nconst useResizeObs = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const target = ref.current;\r\n    const resObs = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect)\r\n      });\r\n\r\n    });\r\n    resObs.observe(target);\r\n    return() => resObs.unobserve(target);\r\n  }, [ref]);\r\n\r\n  return dimensions;\r\n}\r\n\r\nconst GraphField = () => {\r\n  const globalContext = useContext(GlobalContext);\r\n  const {data} = globalContext;\r\n  const svgRef = useRef();\r\n  const contRef = useRef();\r\n  const dimensions = useResizeObs(contRef);\r\n\r\n  const buildChart = (data, dimensions) => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const xScale = scaleTime().domain([\r\n      min(data, (d) => new Date(d.timeStamp)),\r\n      max(data, (d) => new Date(d.timeStamp))\r\n    ]).range([0, dimensions.width]);\r\n\r\n    const yScale = scaleLinear().domain([\r\n      min(data, (d) => d.dataPoint),\r\n      max(data, (d) => d.dataPoint)\r\n    ]).range([dimensions.height, 0]);\r\n\r\n    /* keeping this section commented out in case i will need to show axis in the future\r\n    const xAxis = axisBottom(xScale)\r\n    .ticks(data.length)\r\n    .tickFormat(index => index + 1);\r\n    const yAxis = axisLeft(yScale);\r\n\r\n    svg.select(\".x-axis\")\n      .style(\"transform\", `translateY(${dimensions.height/2}px)`)\n      .call(xAxis);\n\n\n    svg.select(\".y-axis\")\n      // .style(\"transform\", `translateX(${dimensions.width}px)`)\n      .call(yAxis);\n   */\r\n    const myLine = line()\r\n      .x(value => xScale(new Date(value.timeStamp)))\r\n      .y(value => yScale(value.dataPoint));\r\n\r\n    svg.selectAll(\".line\")\r\n    .data([data])\r\n    .join(\"path\")\r\n    .attr(\"class\", \"line\")\r\n    .attr(\"d\", myLine)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"blue\");\r\n\r\n    svg.select(\".text-overlay\")\r\n      .attr(\"font-family\", \"sans-serif\")\r\n      .attr(\"font-size\", 12)\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .attr(\"stroke-linejoin\", \"round\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .selectAll(\"text\")\r\n      .data(data)\r\n      .join(\"text\")\r\n      .text(d => d.dataPoint)\r\n      .attr(\"dy\", \"1em\")\r\n      .attr(\"x\", d => xScale(new Date(d.timeStamp)))\r\n      .attr(\"y\", d => yScale(d.dataPoint));\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (!dimensions)\r\n      return;\r\n\r\n    buildChart(data, dimensions);\r\n    //doing it here because of the dependency\r\n    localStorage.setItem('data', JSON.stringify(data))\r\n    //eslint-disable-next-line\r\n  }, [data, dimensions]);\r\n\r\n  return (<div className='graph-container'>\r\n    <div ref={contRef} className='graph-wrapper'>\r\n      <svg className='graph-svg' ref={svgRef}>\r\n        <g className='x-axis'/>\r\n        <g className='y-axis'/>\r\n        <g className='text-overlay'/>\r\n      </svg>\r\n    </div>\r\n  </div>)\r\n}\r\n\r\nexport default GraphField;\r\n","import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GlobalContext from '../../context/global/globalContext';\r\n\r\nconst leadingZero = (num) => `0${num}`.slice(-2);\r\n\r\nconst formatTime = (date) =>\r\n  [date.getHours(), date.getMinutes(), date.getSeconds()]\r\n  .map(leadingZero)\r\n  .join(':');\r\n\r\nconst DataItem = ({data}) => {\r\n  const globalContext = useContext(GlobalContext);\r\n  const {deleteDataPoint} = globalContext;\r\n  const {id, timeStamp, dataPoint} = data;\r\n  const dateObj = new Date(timeStamp);\r\n  const time = formatTime(dateObj)+\":\"+dateObj.getMilliseconds();\r\n  const onDelete = e => {\r\n    e.preventDefault();\r\n\r\n    deleteDataPoint(id);\r\n  }\r\n\r\n  return (<div className='item-container flex-row'>\r\n    <span className='text'>{time}</span>\r\n    <span className='text text-700'>{dataPoint}</span>\r\n    <button onClick={onDelete} className='button button-remove'>Remove</button>\r\n  </div>)\r\n}\r\n\r\nDataItem.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default DataItem;\r\n","import React, {Fragment, useRef, useContext, useEffect} from 'react';\r\nimport DataItem from './DataItem';\r\nimport GlobalContext from '../../context/global/globalContext';\r\n\r\n\r\nconst GraphControlsForm = () => {\r\n  const globalContext = useContext(GlobalContext);\r\n  const {data, addDataPoint, getDataFromStorage} = globalContext;\r\n\r\n  useEffect(() => {\r\n    let initData = localStorage.getItem('data');\r\n    if(initData){\r\n      getDataFromStorage(initData);\r\n    }\r\n    //eslint-disable-next-line\r\n  },[]);\r\n\r\n  const numRef = useRef(0);\r\n  const enterListener = (e) =>{\r\n    if(e.keyCode===13){\r\n      e.preventDefault();\r\n      addDP();\r\n    }\r\n  }\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    addDP();\r\n  }\r\n\r\n  const addDP = () => {\r\n    let curValue = numRef.current.value;\r\n    if(curValue && !isNaN(curValue)){\r\n      //item = {id, dataPoint, timeStamp}\r\n    addDataPoint({id: data.length>0? data[data.length-1].id+1 : 0, dataPoint: Number(curValue), timeStamp: new Date()});\r\n  }\r\n    numRef.current.value=\"\";\r\n  }\r\n\r\n  return (<div className='controls-container'>\r\n    <div className='controls-wrapper flex-column'>\r\n      <div  className='number-input-container flex-column'>\r\n        <h3 className='text text-h3 text-700'>Data</h3>\r\n        <input ref={numRef} onKeyDown={enterListener} className='controls-input' type=\"number\" placeholder='enter new datapoint'/>\r\n        <button onClick={onClick} className='button button-add'>Add</button>\r\n      </div>\r\n      <div className='data-list-container flex-column'>\r\n        <p className='text text-500'>List of values</p>\r\n        <Fragment>{\r\n            data &&\r\n            data.map((item)=>(<DataItem key={item.id} data = {item} />))\r\n          }\r\n          </Fragment>\r\n      </div>\r\n    </div>\r\n  </div>)\r\n}\r\n\r\nexport default GraphControlsForm;\r\n","import React, {useEffect, useState, useRef} from 'react';\nimport GlobalState from './context/global/GlobalState';\nimport GraphField from './components/GraphFiled';\nimport GraphControls from './components/graph-controls/GraphControls';\n//TODO: add pseudo elements for wrapper\n\n\nconst App = () => {\n  const [expandedRight, setExpandedRight] = useState(false);\n  const [expandedLeft, setExpandedLeft] = useState(false);\n\n  const leftPanelRef = useRef('');\n  const rightPanelRef = useRef('');\n\n  useEffect(() => {\n\n    expandedLeft ?\n      leftPanelRef.current.style.width = '0%'\n      : leftPanelRef.current.style.width = '20%';\n\n    expandedRight ?\n      rightPanelRef.current.style.width = '0%'\n      : rightPanelRef.current.style.width = '20%';\n\n  },[expandedRight, expandedLeft])\n\n  const onClick = (e) => {\n    e.preventDefault();\n    if(e.target.getAttribute('name')==='expand-left'){\n      setExpandedLeft(!expandedLeft);\n\n    } else {\n      setExpandedRight(!expandedRight);\n    }\n    e.target.classList.toggle('expand-right');\n\n  }\n\n  return (\n    <GlobalState>\n    <div className='app-container'>\n      <div ref={leftPanelRef} className='panel panel-left'>Panel 1</div>\n      <div className='app-wrapper '>\n        <span name='expand-left' onClick={onClick} className='expand position-left expand-left'></span>\n        <div className='content-wrapper flex-row'>\n        <GraphField/>\n        <GraphControls/>\n      </div>\n        <span name='expand-right' onClick={onClick} className='expand position-right expand-right'></span>\n      </div>\n      <div ref={rightPanelRef} className='panel panel-right'>Panel 2</div>\n      </div>\n    </GlobalState>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}